package be.fp.distriWebApp.core.model.eo;
// Generated by Hibernate Tools 4.3.1.Final

import java.math.BigDecimal;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;

@Entity
@Table(name = "pompe", catalog = "distriwebapp")

public class Pompe implements java.io.Serializable,Comparable<Pompe> {

	public static final String ID = "id";
	public static final String DISTRIBUTEUR = "distributeur";
	public static final String TYPEPOMPELOVS = "type_tompe_lovs";
	public static final String DEBITMLPERSECONDE = "debitmlperseconde";
	public static final String MARQUE = "marque";
	public static final String TYPEPOMPE = "typepompe";

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)

	private Integer id;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "fk_id_distributeur")

	private Distributeur distributeur;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "type_tompe_lovs")
	private RefLovs refLovs;

	@Column(name = "debitmlperseconde", nullable = false, precision = 12, scale = 0)

	private BigDecimal debitmlperseconde;

	@Column(name = "marque", length = 512)

	private String marque;

	@Column(name = "typepompe", length = 512)

	private String typepompe;


	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}
	
	public Distributeur getDistributeur() {
		return distributeur;
	}

	public void setDistributeur(Distributeur distributeur) {
		this.distributeur = distributeur;
	}

	public RefLovs getRefLovs() {
		return refLovs;
	}

	public void setRefLovs(RefLovs refLovs) {
		this.refLovs = refLovs;
	}
	
	public BigDecimal getDebitmlperseconde() {
		return debitmlperseconde;
	}

	public void setDebitmlperseconde(BigDecimal debitmlperseconde) {
		this.debitmlperseconde = debitmlperseconde;
	}

	public String getMarque() {
		return marque;
	}

	public void setMarque(String marque) {
		this.marque = marque;
	}

	public String getTypepompe() {
		return typepompe;
	}

	public void setTypepompe(String typepompe) {
		this.typepompe = typepompe;
	}


	/**
	* toString
	* @return String
	*/
	public String toString() {
		return new ToStringBuilder(this).append("\n").append("id", id).append("\n").toString();
	}

	public boolean equals(Object obj) {
		if (obj instanceof Pompe == false) {
			return false;
		}
		if (this == obj) {
			return true;
		}
		Pompe rhs = (Pompe) obj;
		return new EqualsBuilder().append("id", rhs.id).isEquals();
	}

	public int hashCode() {
		return new HashCodeBuilder(17, 37).append(id).toHashCode();
	}
	
	@Override
	public int compareTo(Pompe pompeParam)
	{
		int compare = (this.getId() > pompeParam.getId()) ? 1 : 0;
		if(compare == 0){
		    compare = (this.getId() == pompeParam.getId()) ? 0 : -1;
		}
	    return compare;
	}

}
