package be.fp.distriWebApp.core.model.eo;
// Generated by Hibernate Tools 4.3.1.Final


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;

@Entity
@Table(name = "cocktail", catalog = "distriwebapp")

public class Cocktail implements java.io.Serializable {

	public static final String ID = "id";
	public static final String INTITULE = "intitule";
	public static final String PRIX = "prix";
	public static final String COLOR = "color";
	public static final String INGREDIENTCOCKTAILS = "ingredientcocktails";

	@Id
	@Column(name = "id", unique = true, nullable = false)

	private int id;

	@Column(name = "intitule")

	private String intitule;

	@Column(name = "prix", precision = 12, scale = 0)

	private Float prix;

	@Column(name = "color")

	private Integer color;

	@OneToMany(fetch = FetchType.LAZY)
	private Set<Ingredientcocktail> ingredientcocktails = new HashSet<Ingredientcocktail>(0);

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getIntitule() {
		return intitule;
	}

	public void setIntitule(String intitule) {
		this.intitule = intitule;
	}

	public Float getPrix() {
		return prix;
	}

	public void setPrix(Float prix) {
		this.prix = prix;
	}

	public Integer getColor() {
		return color;
	}

	public void setColor(Integer color) {
		this.color = color;
	}

	public Set<Ingredientcocktail> getIngredientcocktails() {
		return ingredientcocktails;
	}

	public void setIngredientcocktails(Set<Ingredientcocktail> ingredientcocktails) {
		this.ingredientcocktails = ingredientcocktails;
	}

	/**
	* toString
	* @return String
	*/
	public String toString() {
		return new ToStringBuilder(this).append("\n").append("id", id).append("\n").toString();
	}

	public boolean equals(Object obj) {
		if (obj instanceof Cocktail == false) {
			return false;
		}
		if (this == obj) {
			return true;
		}
		Cocktail rhs = (Cocktail) obj;
		return new EqualsBuilder().append("id", rhs.id).isEquals();
	}

	public int hashCode() {
		return new HashCodeBuilder(17, 37).append(id).toHashCode();
	}
	
	public List<Ingredientcocktail> getListIngredientCocktailByOrder()
	{
		List<Ingredientcocktail> listeIngredientCocktail = new ArrayList<Ingredientcocktail>(ingredientcocktails);				
		Collections.sort(listeIngredientCocktail);		
		return listeIngredientCocktail;	
	}
	
	public int getNbrByte()
	{
		int nbrByte = 6;
		nbrByte += ingredientcocktails.size() * 3;
		return nbrByte;
	}

}
